version: "3.9"

services:

  web_app:
    build: ./app
    ports:
      - "8000:8000"
    command: uvicorn web_app:web_app --host 0.0.0.0
    volumes:
      - ./app:/usr/src/app
    environment:
      API_KEY: ${API_KEY}
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    depends_on:
      - redis

  celery_worker:
    build: ./app
    command: celery -A celery_worker worker -l INFO
    volumes:
      - ./app:/usr/src/app
    environment:
      API_KEY: ${API_KEY}
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_PORT: ${POSTGRES_PORT}
      POSTGRES_HOST: ${POSTGRES_HOST}
    depends_on:
      - web_app
      - redis

  flower:
    build: ./app
    command: celery --broker=${CELERY_BROKER} flower --port=5555
    ports:
      - "5555:5555"
    environment:
      CELERY_BROKER: ${CELERY_BROKER}
      CELERY_BACKEND: ${CELERY_BACKEND}
    depends_on:
      - web_app
      - redis
      - celery_worker

  redis:
    image: redis:7.4

  postgres:
    image: postgres:17
    restart: always
    volumes:
      - .pgdata:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}"]
      interval: 1s
      timeout: 5s
      retries: 10

  adminer:
    image: adminer:4.8.1
    restart: always
    ports:
      - "8080:8080"